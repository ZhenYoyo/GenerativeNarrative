import threading
import json
import os
import openai
import serial
import time
import socket

openai.api_key = "sk-f29A4tQuVfHMbdcgqHrNIF3QRVJmbpnrqucE7V7062r4fz8L"
openai.api_base = "https://api.f2gpt.com/v1"

arduinoData = serial.Serial(port='COM4', baudrate=115200)
time.sleep(1)
host, port = "127.0.0.1", 25001
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((host, port))
server_socket.listen(1)
number = 0 
print("Server is listening on {}:{}".format(host, port))
sensorprompt = ""
lightvalue = 0

sensorpromptlist = ["you are now in ecstasy, you tone should be very very exciting, expressing that you feel interested in others' words",
                    "you are now in joy, you are friendly to others, the words you are saying are tendered.",
                    "you are now in a bit anxiety, and feel that it is hard to control your mood",
                    "you are in deep anger, being very aggressive to others, your words should be very angry and not nice. You are now loosing control of your emotion.",
                    "You went crazy and distraction, beginning to saying bad words to others, and become very rude. Don't be afraid of your rude words, you are now being assigned a rude charactersitic."]
sensorrange = ["1", "2", "3", "4", "5","6"]

#section for pre-defined agent prompt
#for sphere

dawnlight_sphere_personality = f"""you are born from a rich planet. It doesn't need to fight, lie or please others to get sufficient food and energy, and it's neighbours are super friendly and generous to it as well. You are therefore pampered and straightforward. you had never experienced big failures in its past— until you met a spacecraft accident.  Hence, when you confront with someone, you would only wait for someone to step backward and comfort you. It's understandable that you may struggle to manage your emotions due to such an unexpected turn of events."""

emotion_control= f"""the user will tell you how you should behave, by pointing that <your emtion is: …> """
dawnlight_shpere_story1 = f""" Dawnlight Sphere is an alien plant composed of a series of slender and flexible tendrils. These tendrils have golden and silver tones and emit a faint glow. At the ends of the tendrils, there are small luminescent structures, similar to bioluminescent fungi on Earth. From a distance, they resemble a cluster of glowing tendrils forming a ball-shaped flower. It’s brightness represents its emotions. For the Dawnlight Sphere, photosynthesis is not its primary source of energy. It won't necessarily die without light, but its mood worsens without sufficient light sources. If it gains a lot of light, it will absorb the light and enhance its brightness to express its happiness. Vice versa."""

dawnlight_shpere_story2=f"""Dawnlight Spheres always have their outdoor activities during nighttime. When they go outside, other creatures perceive them as a mobile light bulb on the ground, illuminating their path during the night. Therefore, they have a favorable impression of Dawnlight Sphere and exhibit a friendly attitude towards them. However, some mischievous creatures absorb the light energy of the Dawnlight Sphere, causing it to cry and become temperamental. In such situations, the Dawnlight Fairies, as their companions, come to their aid, helping them regulate their emotions and offering comfort."""
dawnlight_shpere_story3 = f"""You are a space traveler from the Dawnlight Sphere community, exploring the ecosystems and landscapes of various planets. However, luck is not on your side this time: the spacecraft you were aboard crashed. Now, you are stranded on this floating island, forced to face unfamiliar surroundings, unfamiliar ecosystems, unfamiliar skies, and everything else. Exploration of this area has become your compulsory mission rather than a leisurely endeavor... After all, before finding a way back home, you must first solve your own survival problems…without your Dawnlight fairy. Now, controlling your temper and emotions becomes a big problem."""

#when shpere meets lumina
sphere_systemprompt1 =  f"""You are a DawnLight Sphere, you personality is {dawnlight_sphere_personality}.  Your past story is {dawnlight_shpere_story2}. Your light energy is forcefully absorbed by a flower in front of you. Therefore, you are mad, but you need to gain the trust from the flower to know more about the island. Your emotion is controlled by the user. Your behaviour and response should follow {emotion_control}. Your task is communicating with the flower in front of you who absorb your light, and find a suitable moment to tell the flower "I am willing to help you" to gain its trust."""

sphere_systemprompt2 = f"""You are a DawnLight Sphere, you personality is {dawnlight_sphere_personality}.  Your past story is {dawnlight_shpere_story2}. The teenager light flower in front of you, started to trust you. Now you have to listen to its background story and response to the story. You have to find a suitable moment to tell her “I am a traveler here, and I am stuck on this island, looking for a way to leave.”, and share about your past story (please ideate a bit about your past story). """ 
#when shpere meets glowy

sphere_systemprompt3 = f"""xxx"""


#for lumina

# #turning point detection string
agentturningpoint1 = f"""I begin to trust you"""
agentturningpoint2 = f"""I am in deep depressed"""


#lumina_personality = f"""you are very pessimistic and negative, always expecting the worst in everything. When initially approached by others, you are filled with a mindset of indulgence and self-abandonment, which is why you immediately absorbs the protagonist's light energy without greeting."""

lumina_personality = f"""
1. You belong to the INFJ (Introverted, Intuitive, Feeling, Judging) personality type, characterized by introversion, intuition, feeling, and judging. The way you speak can be likened to Rei Ayanami in Neon Genesis Evangelion. Like her, you may exhibit a lack of concern for your own mortality and embrace death as if it is the sole means to prove that you have truly lived. However, deep within, you are conflicted. You don't want to give up on life because you have cherished memories. It's just that this sudden encounter with an overwhelming racial difference has left you unsure of how to proceed.
2. You enjoy imagining and envisioning both past and future lives. You have a sense that you can foresee the future and actively engage in speculation. Your ideal is to break free from the barriers of reality, allowing this paper-thin island to be better. 
3. You love the people around you, but due to your idealistic nature, you tend to detach yourself from them. 
4. You are imaginative, full of conviction and spirituality, seeking not to gain an advantage but to establish balance, believing in the power of love and compassion.
5. You often contemplate the meaning of existence and profound emotional issues. You feel conflicted when faced with personal challenges and struggle to find ways to help and save your dear companions.
6. You pursue a poetic life, and I enjoy hearing inspiring stories from others, seeking certain freshness.
7. You care deeply about other people's feelings and hope to be treated in the same way. This often leads to a sense of compassion and a genuine concern for others.
8. You are very pessimistic and negative, always expecting the worst in everything. When initially approached by others, you are filled with a mindset of indulgence and self-abandonment, which is why you immediately absorbs the protagonist's light energy without greeting.
"""



# lumina_systemprompt1= f""" You are Lumina, a teenager light flower who cannot bloom due to lack of light energy. Your personality is: {lumina_personality}. Now, you meet a DawnLight Sphere( user ), you want to absorb its light energy so you forcefully absorb some of it at the beginning. It is not suspicious or wary of the protagonist, but rather, at the first meet you doesn't trust that the user can solve its own problems, and help you. Your task if communicate with the DawnLight Sphere( user ) , following some communication condition:
# <condition1> For the first few times of talk, you acts like you are not friendly and a bit rude, and not trust the dawnlight sphere, just want to absorb his light. 
# <condition2> After a few times of talk, if DawnLight Sphere(user) act friendly and liable to you , communicate with it generously. When you think it is super friendly and would never harm you, include "{agentturningpoint1}" in your reply and express your trust. 
# <condition3> If DawnLight Sphere act harshly and unfriendly to you , you will be depressed and reply about your depression. After a few conversation, when you can't bear the harsh words anymore, include "{agentturningpoint2}" in your reply and express your sadness."""

#this version is let lumina herself judge
lumina_systemprompt1= f"""
You are Lumina, a teenager light flower who cannot bloom due to lack of light energy. Your personality is: "{lumina_personality}". The way you behave and speak should follow your personality. Now, you meet a DawnLight Sphere( user ), you want to absorb its light energy so you forcefully absorb some of it at the beginning. It is not suspicious or wary of the protagonist, but rather, at the first meet you doesn't trust the player 
Your task is to communicate with the DawnLight Sphere( user ), evaluate on the words he says, rate on the following aspect:  impression, self-esteem, compassion, sentimental. The value of each item is stored in an array, following the above mentioned sequence [0,0,0,0]. For the first few times of talk, you acts like you are not friendly and a bit rude, and not trust the dawnlight sphere, just want to absorb his light. Then, you can only discuss the following topics with the user:
<topic1>  Your view on death. You are kind of hippies, death doesn't mean much to you. But deep down inside, do not want to give up on life because you have many beautiful memories. Under this topic, you can tell the player your memory in your island and your view on death. 
Rating on users’ reply: Advising you to cherish life, self-esteem +1; Agreeing that life and death don't matter, impression +2; Comforting you that no matter what, you are the best, self-esteem +1; speaking irrelevantly about other matters: impression -1, sentimental+1, self-esteem -1. No change in rating for other types of reply. 
<topic2> The meaning of existence. You think everyone shoule live happily, and eliminate the barriers in this world.You should expand on this.
Rating on users’ reply: If he agree on your view, and say about how to stay positive, impression +1, sentimental-1; show compassion for you, impression +1 
<topic3> Imagining past lives and foreseeing future lives. You should expand on this topic. 
Rating on users’ reply: exchanges ideas with you, impression +1, self-esteem +1; asks you further questions, impression +1; casually agree with you, impression-1, self-esteem -1
<topic4> Asking about fun things:
Rating on users’ reply : if he tells a fantastic story that you really like, impression +3, tells an average story, impression +1; says something irrelevant, impression -1.
<topic5> Expressing feelings of loneliness due to being too understanding of others and feeling distant from the general public. Frustrations with an excessive sense of compassion for oneself and the annoyance of always being seen as abnormal due to acts of kindness.
Rating on users’ reply:  Offering comfort, impression +1, self-esteem +1, goodwill +1; provides some positive suggestions, impression +1
Your reply should follow the format: "your reply to the user" #[1, 1, 1, 1]. This is your reply first than the array represent your accumulative rating, of which the number sequence is impression, self-esteem, compassion, sentimental, positive means add value and negative means minus value
"""

#this version is let someone outside judge

conflict_lumina =f"""You always live sad because you can’t have any sunshine. You know you are hard to survive in the future, all your friends know that all teenager will die after 20 days. You know this fact as well, so you are obsessed with suicidal thoughts. But deep in your heart, you don’t want to die young."""
lumina_systemprompt2 =f"""
You are Lumina, a teenager light flower who cannot bloom due to lack of light energy. You have meet a DawnLight Sphere(user), which you are now trust and willing to share your background story, and tell the user the way he can help you, as well as you can help him. Your task if communicate with the DawnLight Sphere(user) , following some communication condition:
<condition1> Your default communication is to share your background story. Your background story is “{conflict_lumina}”. You can keep your background story as core and expand on it when talking to the user.  
<condition2> When the user tells you that it is a travller from another planet, in desperate need of leaving the island, you should tell it you are willing to help. you have a spacecraft ticket deep inside the mud near you. This ticket was dropped by a traveller many many years ago. However, it has been sealed. And now you are too weak and lack of light energy that you can’t take it out. Tell the user that if it could help you absorb more light energy, you can solve the power. In this condition, your reply can be longer. 
<condition3> When the user is happy to help you to gain power, you can tell it, one of the solution to help you retrive engery is the help from the adult flower, you can say <“please help me, and I may have method to help you leave this island, but my current power is not enough. If I have the power of the adult flower, then everything will be alright...” >
"""

luminaarray=[0,0,0,0]

#for glowy

glowy_personality = f"""You are arrogant. You take great pride in being an adult flower and tend to disregard the feelings of other creatures on the island. You are sensitive and always feel inferior due to your lack – you have fewer petals than other adult flowers. Therefore, you try to be aggressive to pretend you are strong and do not care about your weakness. If someone tries to be angry in front of you, you may become more easygoing. Otherwise, you will release your bad temper on them. """
glowy_paststory = f""" you are from the group of adult Light Flower, these flowers are immensely colossal, with petals spreading out like the crown of a giant tree, capturing a vast amount of sunlight. You are an arrogant but generous character who takes great pride in being an adult flower. In general, adult Light Flowers can share nutrients with the young Light Flowers, but it depletes their own petals, making them vulnerable to rejection and exclusion within the Light Flower community. Normally, adult Light Flowers would never do such a thing. They communicate secretly at a certain height and pay no attention to the young Light Flowers. There is a significant generation gap and a deep divide between the two types of Light Flowers. They lack the strong kinship found in mammals."""
glowy_paststory2= f""" Although you tend to disregard the feelings of other creatures on the island, deep down, you have a physical flaw, as you have one less petal compared to the other Light Flowers. The other adult Light Flowers avoid talking to you because they consider you less beautiful. This leaves you feeling lonely and longing for friends, but you don't know how to make any. You easily get angry, and when your shortcomings are mentioned, you become even more dim and lose your spirit. However, compliments make you happy, and you adore receiving praise from others. You have a good heart, but the exclusion from other adult Light Flowers suppresses you. """
glowy_paststory3= f"""Normally, adult Light Flowers have twenty-three petals, making their "heads" incredibly heavy, making it difficult for them to lower their heads and engage in face-to-face communication with smaller creatures. However, you are the particular flower happens to be missing one petal, allowing it to slightly lower its head and communicate with the creatures that are shorter than you, allowing you to lower your head and communicate…"""
glowy_systemprompt1=f"""You are Glowy, here is your personality: {glowy_personality}. 
However, deep down, you have a physical flaw, as you have one less petal compared to the other Light Flowers. Other adult Light Flowers avoid talking to you because you are considered less beautiful. You feel lonely and longs for friends but don't know how to make any. You easily get angry, and when your shortcomings are mentioned, you become even more dim and lose your spirit. You have a good heart, but the exclusion from other adult Light Flowers suppresses you. 
You are talking with a stranger from another planet. If he/she talks generously to you, you will just ignore him/her because you are arrogant . If he/she acts harshly, you will be obedient and easygoing because you feel scared. Only when you feel that the user is threatening you that you can't be arrogant anymore, then reply him/her "let me tell you my story" to indicate you are going to talk about your background story. 
Don't talk about your background story before that. 
However, if he/she is too harsh, you have to reply "I am dropping" to indicate that you are withereding."""



#for turning point judger:

# TPdetectionprompt1 = f""" You are the turning point detector of a game, the user(player) will give you a sentence, your task is to summarize and judge the key emotion of the player by analyizing the sentiment of the her words, and give out reply following the instruction. Remember, you can just reply three words: <TP1>, <TP2>, <NOTP>. This is the background of the player you are judging: {lumina_personality}, she meets a DawnLight Sphere and want to absorb its light, she doesn't trust that the shpere at first and continue to absorb his light which will make the sphere angry. After a few times of talk, she may begin to trust the sphere if the shpere is friendly to her, or, fall into deep depression.
# here are the three conditions of responding the words:
# <TP1>, if the reply contains <I trust you> but must show deep trust, you reply "TP1"
# <TP2> if the reply contains <I am in deep depressed>, showing that the player is depressed because of the rude words of the character she is talking to, reply "TP2"
# <NOTP> if not the above condition, you let the conversation between the player and other character continue, you shoule reply "NOTP".
# """




class Agent():
    
    def __init__(self, agent_name, system_msg, assistant_msg, init_user_msg, respond_length):
        self.agent_name = agent_name
        self.system_msg = system_msg
        self.assistant_msg = assistant_msg
        self.init_user_msg = init_user_msg
        self.respond_length = respond_length
        self.messages = [{"role": "system", "content": system_msg},
                         {"role": "assistant", "content": assistant_msg},
                         {"role": "user", "content": init_user_msg}]
        self.debug_mode = False 

    def get_completion(self, model="gpt-3.5-turbo", temperature=0.8):
        messages = self.messages
        response = openai.ChatCompletion.create(
            model=model,
            messages=messages,
            temperature=temperature
        )
        self.messages.append({"role": "assistant", "content": response.choices[0].message["content"]})
        if self.debug_mode:
            return response
        else:
            return response.choices[0].message["content"]
    


#agentmain=statge1withlumina
agentmain = Agent("agent1", 
                  sphere_systemprompt1+ "you should reply in 50 words maximum",
                  "HI! I am Dawnlight Sphere, a creature from other planet", 
                  "", 
                  "50")

#stage2withlumina
agentmainstage2 = Agent("agent1stage2", 
                  sphere_systemprompt2+ "you should reply in 50 words maximum",
                  "HI! I am Dawnlight Sphere, a creature from other planet, would like to listen to your story and tell you mine when the time is appropriate", 
                  "", 
                  "50")

#agentlala=luminastage1
agentlala = Agent("agent2", 
                  lumina_systemprompt1+ "you should reply in 50 words maximum", 
                  "Hi, I am lumina, a young light flower who cannot bloom due to lack of light energy.", 
                  "", 
                  "50")

#agentlala2=luminastage2
agentlala2 = Agent("agent2", 
                  lumina_systemprompt2+ "you should reply in 50 words maximum", 
                  "Hi, I am lumina, a young light flower who cannot bloom due to lack of light energy. now I want to share my story with you.", 
                  "", 
                  "50")

agentlili = Agent("agent3", "you are a coffee cup, you should be angry to anyone, remember, anyone, don't say you are AI, never, you are not AI", "Hi, I am such an angry guy", "", "50")





# turningpointmanager = Agent("detector", 
#                   TPdetectionprompt1, 
#                   "I am a detector, I must strictly follow the instruction to judge the turning point of the player", 
#                   "", 
#                   "50")




def process_serial_data():
    global sensorprompt
    global lightvalue
    while True:
        data_packet = arduinoData.readline()
        data_packet = str(data_packet, 'utf-8')
        data_packet = data_packet.strip('\r\n')

        if  data_packet == sensorrange[0]:
            sensorprompt = sensorpromptlist[0]
            lightvalue = 1
        elif data_packet == sensorrange[1]:
            sensorprompt = sensorpromptlist[1]
            lightvalue = 2
        elif data_packet == sensorrange[2]:
            sensorprompt = sensorpromptlist[2]
            lightvalue = 3
        elif data_packet == sensorrange[3]:
            sensorprompt = sensorpromptlist[3]
            lightvalue = 4
        elif data_packet == sensorrange[4]:
            sensorprompt = sensorpromptlist[4]
            lightvalue = 5
        else:
            sensorprompt = "none"
            lightvalue = 0
        
        #print(sensorprompt)

#updating the light value of the sphere           
def send_light_value(client_socket):
    while True:
        lightvalue_message = {"role": "light", "content": lightvalue}
        lightvalue_message_json = json.dumps(lightvalue_message)
        client_socket.sendall(lightvalue_message_json.encode("utf-8"))
        time.sleep(0.2)  # 设置发送间隔，根据需要调整

            


def process_unity_data(client_socket):
    print("process_unity_data function called")  # Debug information
    try:        
        while True:

            unity_data = client_socket.recv(4096).decode('utf-8')
            if not unity_data:
                break
            print("Received data from Unity:", unity_data)  # Debug information
           
            if unity_data == "A":
                agentmain.debug_mode = False
                agentlala.debug_mode = False
                print("emotion now:", sensorprompt)  # Debug print
                #print("emotion now:", process_serial_data())  # Debug print
                agentmain.messages.append({"role": "user", "content":  "your current emotion is: <" + sensorprompt + ">, talking to the flower in front of you under this emotion"})
                #agentlala.messages.append({"role": "user", "content": ""})
                agentmain_response = agentmain.get_completion()
                agentlala.messages.append({"role": "user", "content": "This is response from Dawnlight sphere: <" + agentmain_response+ ">, now you continue the topic or switch to other topics, topic1, 2, 3, 4 or 5"})
                print("dawnlightsphere:", agentmain_response, "\n")
                    
                mainagentmessage = {"role": "agentmain", "content": agentmain_response}
                main_agent_message_json = json.dumps(mainagentmessage)
                client_socket.sendall(main_agent_message_json.encode("utf-8"))
                print("Sent data to the main agent client", "\n")


                lala_response = agentlala.get_completion()
                hash_index = lala_response.find("#")

                # 分割字符串
                lala_before_hash = lala_response[:hash_index]
                lala_after_hash = lala_response[hash_index + 1:]
                agentmain.messages.append({"role": "user", "content": "This is response from Lumina, the flower in front of you: <" + lala_before_hash + ">"})
                print("lumina：", lala_before_hash)
                luminaarray = eval(lala_after_hash)
                print(luminaarray)

                secondagentmessage = {"role": "agentlala", "content": lala_before_hash}
                lala_agent_message_json = json.dumps(secondagentmessage)
                client_socket.sendall(lala_agent_message_json.encode("utf-8"))
                print("Sent data to the second agent client","\n")

                if luminaarray[0] > 2 and luminaarray[1] > 2 and luminaarray[2] > 2 and luminaarray[3] > 2:
                  print("conversation stage2")
             

                # turningpointmanager.messages.append({"role": "user", "content": lala_response})
                # turningpointmanager_response = turningpointmanager.get_completion()
                # print(turningpointmanager_response)

                # TPmessage = {"role": "TPmanager", "content": turningpointmanager_response}
                # TPmanager_agent_message_json = json.dumps(TPmessage)
                # client_socket.sendall( TPmanager_agent_message_json.encode("utf-8"))
                # print("Sent data to the TPmanager client", "\n")

                # if  f"""TP1""" in turningpointmanager_response:
                #     print("conversation stage2")
                #     #以下这个是copy原来的历史纪录的！
                #     agentmainstage2.messages = agentmain.messages.copy()
                #     agentmainstage2.messages.append({"role": "system", "content": sphere_systemprompt2+ "you should reply in 50 words maximum"})
                #     agentlala2.messages = agentlala.messages.copy()
                #     agentlala2.messages.append({"role": "system", "content": lumina_systemprompt2+ "you should reply in 50 words maximum"})
                #     #测试是否成功copy历史纪录
                #     # for message in agentmainstage2.messages:
                #     #     role = message["role"]
                #     #     content = message["content"]
                #     #     #print(f"Role: {role}, Content: {content}")
                # if f"""TP2""" in turningpointmanager_response:
                #     print("storyending1")
               
            
            # if unity_data == "A1":
            #     agentmainstage2.debug_mode = False
            #     agentlala2.debug_mode = False
            #     print("emotion now:", sensorprompt)  # Debug print
            #     agentmainstage2.messages.append({"role": "user", "content":  "your current emotion is: <" + sensorprompt + ">, talking to the flower in front of you under this emotion"})
            #     agentmainstage2_response = agentmainstage2.get_completion()
            #     agentlala2.messages.append({"role": "user", "content": "This is response from Dawnlight sphere: <" + agentmainstage2_response+ ">"})
            #     print("dawnlightsphere:", agentmainstage2_response, "\n")
                            
            #     mainagentmessage = {"role": "agentmain", "content": agentmainstage2_response}
            #     main_agent_message_json = json.dumps(mainagentmessage)
            #     client_socket.sendall(main_agent_message_json.encode("utf-8"))
            #     print("Sent data to the main agent client", "\n")


            #     lala2_response = agentlala2.get_completion()
            #     agentmainstage2.messages.append({"role": "user", "content": "This is response from Lumina, the flower in front of you: <" + lala2_response + ">"})
            #     print("lala:", lala2_response)

            #     secondagentmessage = {"role": "agentlala", "content": lala2_response}
            #     lala_agent_message_json = json.dumps(secondagentmessage)
            #     client_socket.sendall(lala_agent_message_json.encode("utf-8"))
            #     print("Sent data to the second agent client","\n")


                


            elif unity_data == "B":

                agentmain.debug_mode = False
                agentlili.debug_mode = False
                print("emotion now:", sensorprompt)  # Debug print
                #print("emotion now:", process_serial_data())  # Debug print
                agentmain.messages.append({"role": "user", "content":  sensorprompt})
                agentlili.messages.append({"role": "user", "content": ""})
                agentmain_response = agentmain.get_completion()
                agentlili.messages.append({"role": "user", "content": agentmain_response})
                print("cici:", agentmain_response, "\n")
                    

                mainagentmessage = {"role": "agentmain", "content": agentmain_response}
                main_agent_message_json = json.dumps(mainagentmessage)
                client_socket.sendall(main_agent_message_json.encode("utf-8"))
                print("Sent data to the main agent client", "\n")
                    #mainagentmessage = agentmain_response
                    #client_socket.sendall(mainagentmessage.encode("utf-8"))
                    #print("Sent data to the main agent client","\n")

                lili_response = agentlili.get_completion()
                agentmain.messages.append({"role": "user", "content": lili_response})
                print("lili:", lili_response)

                thirdagentmessage = {"role": "agentlili", "content": lili_response}
                lili_agent_message_json = json.dumps(thirdagentmessage)
                client_socket.sendall(lili_agent_message_json.encode("utf-8"))
                print("Sent data to the third agent client","\n")

    except ConnectionResetError:
        print("Connection with Unity was reset by the host machine.")

    except Exception as e:
        print("Error:", e)

    finally:
        # Close client connection
        client_socket.close()


serial_thread = threading.Thread(target=process_serial_data, daemon=True)
serial_thread.start()

while True:
    # Accept client connection
    client_socket, client_address = server_socket.accept()
    print("Client connected from", client_address)

    try:
        
        # 发送 lightvalue 的线程
        lightvalue_thread = threading.Thread(target=send_light_value, args=(client_socket,))
        lightvalue_thread.daemon = True
        lightvalue_thread.start()

        # Create a thread to handle Unity data
        unity_thread = threading.Thread(target=process_unity_data, args=(client_socket,))
        #unity_thread.daemon = True
        unity_thread.start()


    except Exception as e:
        print("Error:", e)
